<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Personal Assistant</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Slider specific styles */
        .slider {
            -webkit-appearance: none;
            width: 50px;
            height: 24px;
            background: #ccc;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
            outline: none;
        }
        .slider::before {
            content: '';
            position: absolute;
            width: 22px;
            height: 22px;
            background: #fff;
            border-radius: 50%;
            top: 1px;
            left: 1px;
            transition: 0.3s;
        }
        .slider.active::before {
            left: 27px;
        }

        body.dark {
            /* background-color: gray; */
            color: white;
            /* transition: background-color 0.3s, color 0.3s; */
        }
        body.light {
           
            background-color: white;
            color: black;
            transition: background-color 0.3s, color 0.3s;
        }

        /* Chat message styles for dark and light mode */
        .message-dark {
            background-color: #333;
            color: white;
        }
        .message-light {
            background-color: #f1f1f1;
            color: black;
        }
       
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="bg-black text-white h-screen flex justify-center items-center transition-colors duration-300 dark">

    <!-- Theme Toggle Switch -->
    <div class="absolute top-4 right-4 flex items-center">
        <input type="checkbox" id="theme-toggle" class="hidden" />
        <!-- <label for="theme-toggle" class="slider" id="slider-toggle"></label> -->
    </div>

    <div class="w-full max-w-2xl mx-auto bg-black rounded-lg shadow-lg flex flex-col h-5/6 overflow-hidden" id="chat-container">
        <button id="toggle" class="bg-black text-white py-2 px-4 rounded-lg mb-4 mx-auto">
            Talk Now ü°•
        </button>
        <h1 class="text-5xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-blue-500 py-4">
            Personal Assistant
        </h1>
        <div id="messages" class="flex-1 overflow-y-auto p-4 flex flex-col gap-3 relative">
            <!-- Messages will be appended here -->
            <div id="scroll-arrow" class="hidden absolute bottom-4 right-4 text-2xl cursor-pointer animate-bounce">‚¨áÔ∏è</div>
        </div>
        <form id="chat-form" class="hidden p-4 bg-black border-t border-gray-800 flex">
            <input type="text" id="message" placeholder="Ask Personal Assistant..." required class="flex-1 bg-black rounded-lg text-white placeholder-gray-500 p-3 mr-2">
            <button type="submit" class="bg-gray-600 hover:bg-gray-700 text-white rounded-lg px-4">‚û§</button>
        </form>
    </div>

    <script>
        const toggleButton = document.getElementById('toggle');
        const chatForm = document.getElementById('chat-form');
        const messagesDiv = document.getElementById('messages');
        const scrollArrow = document.getElementById('scroll-arrow');
        const menuToggle = document.getElementById('menu-toggle');
        const contactPanel = document.getElementById('contact-panel');
        const closePanel = document.getElementById('close-panel');
        const themeToggle = document.getElementById('theme-toggle');
        const sliderToggle = document.getElementById('slider-toggle');
        const chatContainer = document.getElementById('chat-container');

        // Variable to track the current theme mode
        let currentThemeMode = document.body.classList.contains('dark') ? 'dark' : 'light';

        // Load saved messages from localStorage
        function loadMessages() {
            const savedMessages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            savedMessages.forEach(({ message, sender, timestamp }) => {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', currentThemeMode === 'dark' ? 'message-dark' : 'message-light', sender === 'user' ? 'self-end' : 'self-start', 'max-w-[80%]', 'rounded-lg', 'p-4');
                messageDiv.innerHTML = `${message}<div class="text-xs text-gray-500 mt-1">${new Date(timestamp).toLocaleString()}</div>`;
                messagesDiv.appendChild(messageDiv);
            });
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // Save messages to localStorage
        function saveMessage(message, sender) {
            const savedMessages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            savedMessages.push({ message, sender, timestamp: new Date().toISOString() });
            localStorage.setItem('chatMessages', JSON.stringify(savedMessages));
        }

        // Toggle chat visibility
        toggleButton.addEventListener('click', () => {
            chatForm.classList.remove('hidden');
            toggleButton.classList.add('hidden');
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        chatForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const messageInput = document.getElementById('message');
            const userMessage = messageInput.value;


            // Create and display user message element
            const userMessageDiv = document.createElement('div');
            userMessageDiv.classList.add('message', currentThemeMode === 'dark' ? 'message-dark' : 'message-light', 'self-end', 'max-w-[80%]', 'rounded-lg', 'p-4');
            userMessageDiv.innerHTML = `${userMessage}<div class="text-xs text-gray-500 mt-1">${new Date().toLocaleString()}</div>`;
            messagesDiv.appendChild(userMessageDiv);
            messageInput.value = '';

            messagesDiv.scrollTop = messagesDiv.scrollHeight;

            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({ message: userMessage }),
                });
                const data = await response.json();

                // Create and display AI response message element
                const aiMessageDiv = document.createElement('div');
                aiMessageDiv.classList.add('message', currentThemeMode === 'dark' ? 'message-dark' : 'message-light', 'self-start', 'max-w-[80%]', 'rounded-lg', 'p-4');
                aiMessageDiv.innerHTML = `<strong>Personal Assistant:</strong> ${data.response}<div class="text-xs text-gray-500 mt-1">${new Date().toLocaleString()}</div>`;
                messagesDiv.appendChild(aiMessageDiv);
                
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            } catch (error) {
                console.error('Error fetching Personal Assistant response:', error);
            }

            if (messagesDiv.scrollHeight > messagesDiv.clientHeight) {
                scrollArrow.classList.remove('hidden');
            } else {
                scrollArrow.classList.add('hidden');
            }
        });

        // Theme toggle functionality
        sliderToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark');
            document.body.classList.toggle('light');
            sliderToggle.classList.toggle('active');

            // Update the current theme mode
            currentThemeMode = document.body.classList.contains('dark') ? 'dark' : 'light';

            // Change chat background and message bubble colors based on theme
            const isDarkMode = document.body.classList.contains('dark');
            chatContainer.classList.toggle('bg-black', isDarkMode);
            chatContainer.classList.toggle('bg-white', !isDarkMode);

            const messageDivs = document.querySelectorAll('.message');
            messageDivs.forEach((messageDiv) => {
                if (isDarkMode) {
                    messageDiv.classList.remove('message-light');
                    messageDiv.classList.add('message-dark');
                } else {
                    messageDiv.classList.remove('message-dark');
                    messageDiv.classList.add('message-light');
                }
            });

            // Update form and input colors
            chatForm.classList.toggle('bg-black', isDarkMode);
            chatForm.classList.toggle('bg-white', !isDarkMode);
            chatForm.querySelector('#message').classList.toggle('bg-black', isDarkMode);
            chatForm.querySelector('#message').classList.toggle('bg-white', !isDarkMode);
            chatForm.querySelector('#message').classList.toggle('text-white', isDarkMode);
            chatForm.querySelector('#message').classList.toggle('text-black', !isDarkMode);
        });

        // Load messages when the page loads
        loadMessages();
    </script>
</body>
</html>
